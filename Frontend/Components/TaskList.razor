@page "/tasks"
@inject HttpClient HttpClient
@inject NavigationManager Navigation
@inject TaskService TaskService
@using Common.DTOs.Tasks

<h3>Tasks</h3>
<div>
    <input type="text" @bind="searchText" placeholder="Search..." />
    <button @onclick="Search">Search</button>
</div>

<table class="table">
    <thead>
        <tr>
            <th>Title</th>
            <th>Description</th>
            <th>Due Date</th>
            <th>Priority</th>
            <th>Status</th>
            <th>Actions</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var task in tasks)
        {
            <tr>
                <td>@task.Title</td>
                <td>@task.Description</td>
                <td>@task.DueDate</td>
                <td>@task.Priority</td>
                <td>@task.Status</td>
                <td>
                    <button @onclick="() => EditTask(task.Id)">Edit</button>
                    <button @onclick="() => DeleteTask(task.Id)">Delete</button>
                </td>
            </tr>
        }
    </tbody>
</table>

@code {
    private List<TaskDTO> tasks = new List<TaskDTO>();    

    private string searchText = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        tasks = await TaskService.GetTasks(searchText);
    }  

    private async Task Search()
    {
        tasks = await TaskService.GetTasks(searchText);        
    }

    private void EditTask(int id)
    {
        Navigation.NavigateTo($"/task/edit/{id}");
    }

    private async Task DeleteTask(int id)
    {
        await TaskService.DeleteTask(id);
        tasks = await TaskService.GetTasks(searchText);
    }
}
