@inherits LayoutComponentBase
@using Microsoft.AspNetCore.Components.Authorization;
@inject NotificationService NotificationService
@inject AuthenticationService AuthenticationService
@inject CustomAuthenticationStateProvider AuthenticationStateProvider

<div class="page">
    <div class="sidebar">
        <NavMenu />
    </div>

    <main>
        @* TODO - have a look at BlazoredToasts! *@
        <div>
            @if (!string.IsNullOrEmpty(notificationMessage))
            {
                <div class="alert alert-info">@notificationMessage</div>
            }
        </div>

        @*@if (!IsAuthenticated)
        {
            <div class="auth-actions">
                <NavLink href="/login" class="nav-link">Login</NavLink>
                <NavLink href="/register" class="nav-link">Register</NavLink>
            </div>
        }
        else
        {
            <div class="auth-actions">
                Not authenticated - TODO
            </div>
        } *@

        <AuthorizeView>
            <Authorized>
                Hello, @context.User.Identity?.Name
                <NavLink href="/signout" class="nav-link">Sign Out</NavLink>
                <article class="content px-4">
                    @Body
                </article>
            </Authorized>
            <NotAuthorized>                
                <NavLink href="/signin" class="nav-link">Sign In</NavLink>
            </NotAuthorized>
        </AuthorizeView>
        
    </main>
</div>

@code {
    private string notificationMessage = string.Empty;
    
    private bool IsAuthenticated;

    protected override async Task OnInitializedAsync()
    {
        NotificationService.OnNotificationReceived += message =>
        {
            notificationMessage = message;
            InvokeAsync(StateHasChanged);
        };

        await NotificationService.StartAsync();
    }

    // private AuthenticationState authState;
    // private bool IsAuthenticated;

    // protected override async Task OnInitializedAsync()
    // {
    //     authState = await AuthStateProvider.GetAuthenticationStateAsync();
    //     IsAuthenticated = authState.User.Identity.IsAuthenticated;
    //     AuthStateProvider.AuthenticationStateChanged += HandleAuthenticationStateChanged;
    // }

    // public void Dispose()
    // {
    //     AuthStateProvider.AuthenticationStateChanged -= HandleAuthenticationStateChanged;
    // }

    // private void HandleAuthenticationStateChanged(Task<AuthenticationState> task)
    // {
    //     IsAuthenticated = task.Result.User.Identity.IsAuthenticated;
    //     StateHasChanged();
    // }
}